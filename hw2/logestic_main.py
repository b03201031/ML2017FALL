import data_preprocessing as DP
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
import sys

##C1 is type 1 here
PATH_X_TRAIN_C1 = "X_train_type_1.csv"
PATH_X_TRAIN_C2 = "X_train_type_0.csv"
PATH_X_TRAIN_ALL = "X_train.csv"
PATH_X_TEST = sys.argv[5]
PATH_Y_PRE = sys.argv[6]


########################################constant declare
ALL_NUM_DATA_C1 = 7841
ALL_NUM_DATA_C2 = 24720
ALL_NUM_FEATURE = 106
ALL_NUM_DATA_TEST = 16281
LEARNING_RATE = 0.001
NUM_ITE = ALL_NUM_DATA_C1 + ALL_NUM_DATA_C2


NUM_ROW_WANTED_C1 = int(ALL_NUM_DATA_C1)
NUM_ROW_WANTED_C2 = int(ALL_NUM_DATA_C2)

ROW_WANTED_C1 = range(NUM_ROW_WANTED_C1)
ROW_WANTED_C2 = range(NUM_ROW_WANTED_C2)

ROW_WANTED_PRE_C1 = range(ALL_NUM_DATA_C1 - NUM_ROW_WANTED_C1, ALL_NUM_DATA_C1)
ROW_WANTED_PRE_C2 = range(ALL_NUM_DATA_C2 - NUM_ROW_WANTED_C2, ALL_NUM_DATA_C2)

COL_WANTED = range(ALL_NUM_FEATURE)

############################################data preprocessing
#x_train_C1 = DP.get_data(PATH_X_TRAIN_C1, 0, ALL_NUM_FEATURE, 0, NUM_ROW_WANTED_C1)
#x_train_C2 = DP.get_data(PATH_X_TRAIN_C2, 0, ALL_NUM_FEATURE, 0, NUM_ROW_WANTED_C2)
#x_all = (pd.read_csv(PATH_X_TRAIN_ALL)).values


mean_all = np.array([38.76745900128985,189435.6777839199,0.6670351943983784,1081.9051041090843,87.89926908666544,40.392236349118605,0.028990848227995823,0.06406240402923653,0.00018426386585590566,0.6885326454149008,0.03556292611018979,0.08113752226521713,0.04195074012652786,0.00042994902033044653,0.05914870093974572,0.02800810761009766,0.03912536085007064,0.013758368650574289,0.004852281800872182,0.010810146796879798,0.018979178183158283,0.014863951845709723,0.03279896812235121,0.04170505497205331,0.16399484061175604,0.011117253239972974,0.3244886677722499,0.0573674835698053,0.001965481235796327,0.015846692463607887,0.22031816227504453,0.13451262207481113,0.0008598980406608931,0.4547017996437565,0.012898470609913396,0.33376328235366376,0.031017750752410787,0.03224617652478349,0.11307659234690744,0.0003685277317118113,0.1236410539893127,0.12407100300964315,0.03046495915484307,0.04311774461028192,0.06264971439100793,0.09999385787113814,0.005712179841533075,0.12480805847306677,0.020514710398624163,0.11387506909894969,0.031816227504453044,0.0465573367729255,0.05933296480560162,0.40065106565935754,0.2627602727105215,0.03224617652478349,0.1543516982986303,0.10312634359068854,0.046864443216018674,0.009765984890363,0.029482218536944906,0.09587863153368957,0.008291873963515755,0.8565812910754868,0.000552791597567717,0.003746698605736748,0.002886800565075855,0.0015969535040845158,0.0026411154106013145,0.002026902524414962,0.0010441619065167987,0.003009643142313126,0.002272587678889503,0.000552791597567717,0.00423806891468583,0.0012284257723727044,0.0014741109268472453,0.0019040599471776918,0.0,0.00042994902033044653,0.0006142128861863522,0.0003685277317118113,0.0031324857195503962,0.0009827406178981636,0.0007984767520422579,0.001965481235796327,0.0015355322154658804,0.0018426386585590566,0.0003071064430931761,0.018917756894539648,0.0009213193292795283,0.000552791597567717,0.0009213193292795283,0.005957864996007616,0.001658374792703151,0.0018426386585590566,0.004299490203304466,0.000552791597567717,0.002149745101652233,0.0008598980406608931,0.0007370554634236226,0.0004913703089490818,0.9005589337264296,0.001167004483754069,0.00042994902033044653,0.01682943308150605])
var_all = np.array([191.78819481474622,11174955281.538092,0.2220992438322959,57512552.052968845,162483.89071932324,155.72416796723348,0.028150378947017135,0.0599584124192314,0.0001842299126836455,0.21445544161285923,0.034298204396670966,0.07455422474587851,0.04019087552936438,0.0004297641641703633,0.055650132116886256,0.027223653518198842,0.03759456698842239,0.013569075942649183,0.004828737162197106,0.010693287523109715,0.018618968978650213,0.014643014781238145,0.03172319581246019,0.03996574336183132,0.13710053286448073,0.010993659920371286,0.21919577225964032,0.05407645539867343,0.001961618119308059,0.015595574801571713,0.17177806964679165,0.11641897657737012,0.0008591586160205604,0.24794807304448563,0.01273210006583859,0.2223653537061723,0.0300556498906721,0.031206360624316,0.10029027661011874,0.0003683919190227708,0.10835394375772456,0.10867738922182425,0.029536845418536822,0.041258604710004435,0.05872472767773306,0.08999508625918477,0.005679550842991062,0.1092310070132503,0.020093857055884748,0.10090753773665913,0.03080395517183794,0.044389751165537894,0.055812564092978856,0.24012978924537873,0.19371731179561386,0.031206360624316,0.13052725153095895,0.09249130084830377,0.04466816717807125,0.009670610429484205,0.02861301732708474,0.08668591954891655,0.008223118789688925,0.122849782854939,0.0005524860190173756,0.003732660855294517,0.002878466947573333,0.0015944032435903082,0.002634139919989199,0.002022794190571482,0.0010430716324297778,0.0030005851904690516,0.002267423024131262,0.0005524860190173755,0.004220107686560202,0.0012269167424944752,0.0014719379238225944,0.0019004345028952455,0.0,0.0004297641641703632,0.0006138356287167952,0.0003683919190227708,0.0031226732527672094,0.0009817748387760971,0.0007978391869187059,0.0019616181193080596,0.0015331743562811478,0.0018392433413330408,0.0003070121287257869,0.01855987536861874,0.0009204704999730243,0.0005524860190173756,0.0009204704999730243,0.0059223688406969625,0.0016556245857500774,0.0018392433413330408,0.0042810045872961515,0.0005524860190173755,0.0021451236976501543,0.0008591586160205602,0.0007365122126674601,0.000491128864168565,0.08955254061194576,0.0011656425842889672,0.00042976416417036324,0.016546203263661158])
mean_all.shape = 106, 1
var_all.shape = 106, 1

x_test = DP.get_data(PATH_X_TEST, 0, ALL_NUM_FEATURE, 0, ALL_NUM_DATA_TEST)
x_test_normalized = DP.normalization(x_test, mean_all, var_all)
col_1_test = np.repeat(1, len(x_test_normalized))
col_1_test.shape = len(col_1_test), 1
x_test_normalized = np.concatenate((col_1_test, x_test_normalized), axis = 1)

#print(x_test)
'''
N1 = NUM_ROW_WANTED_C1
N2 = NUM_ROW_WANTED_C2

mean_all = np.mean(x_test, axis = 0)
var_all = np.var(x_test, axis = 0)

x_train_C1_normalized = DP.normalization(x_train_C1, mean_all, var_all)
x_train_C2_normalized = DP.normalization(x_train_C2, mean_all, var_all)
y_C1 = np.repeat(1, len(x_train_C1_normalized))
y_C2 = np.repeat(0, len(x_train_C2_normalized))
y_train = np.concatenate((y_C1, y_C2), axis = 0)


x_train_all_normalized = np.concatenate((x_train_C1_normalized, x_train_C2_normalized), axis = 0)




col_1_train = np.repeat(1, len(x_train_all_normalized))
col_1_test = np.repeat(1, len(x_test_normalized))

col_1_train.shape = len(col_1_train), 1
col_1_test.shape = len(col_1_test), 1


x_train_all_normalized = np.concatenate((col_1_train, x_train_all_normalized), axis = 1)
x_test_normalized = np.concatenate((col_1_test, x_test_normalized), axis = 1)


w_0 = np.repeat(0, len(x_train_all_normalized[0]))
w_0.shape = 1, len(w_0)
ada = 0

L_set = np.array([])



#############################################gradient decent
for i in range(1000):
	w_0, ada = DP.Gradient_Decent_Logestic(w_0, LEARNING_RATE, x_train_all_normalized, y_train, ada)
	#L_set = np.append(L_set, DP.cross_entropy(w_0, x_train_all_normalized, y_train))

#plt.plot(L_set, "b")
#plt.show()

y_pre_C1 = np.array([])
df_w0 = pd.DataFrame(w_0)
df_w0.to_csv("W.csv", header = False, index = False)

'''

y_pre_C1 = np.array([])
w_0 = np.array([-0.0003958508037831797,6.455899369524786e-05,-4.961892432249548e-06,5.381183276775722e-05,0.00024530139045746347,5.725615824746787e-05,6.366876506053367e-05,4.126167919784251e-05,3.459793038554404e-05,-0.001838967770911915,6.460115677253544e-05,5.607911161862842e-05,3.3340505772038674e-05,1.9225420535377707e-05,-0.0021240998272292087,-0.00012496180572133675,-1.4875896633669292e-05,-1.1737221613490911e-05,-1.016396471983558e-05,-2.8597471405310418e-05,-2.0602421001709457e-05,-1.938515569326193e-05,-1.928580229007138e-05,3.393450934031154e-05,4.100419069058335e-05,0.00010982585264372719,1.0126089980662547e-05,1.900121771186366e-05,5.8418770739137296e-05,-0.0019627260782950806,1.8670722824928014e-05,5.322608405721852e-05,-5.863454512525077e-05,-2.056824321389386e-05,7.947032222426802e-05,-4.3545593059170015e-05,-0.0001026478636484761,-4.510805449990401e-05,-3.643375668934149e-05,-0.00034433616650212306,-6.005801409082776e-05,-0.00036263271250247726,-0.0002828814447230315,-0.00020634844018052007,-0.0002403406735335438,-0.00027111217167805605,-0.00035986812366214097,-0.00014114994085726834,-0.0003245689953194448,-0.00013353197394198174,-0.0003112915296391058,-0.00015710531842924415,-0.00023961164710847136,-0.00014084597347286721,-1.99640606662352e-05,-1.9584955755741227e-05,-4.7636135425148224e-05,-5.2866411392493244e-05,-2.1262012132905927e-05,1.3612355659990135e-05,-3.750264064540372e-05,-3.653691947372948e-05,-4.424186526677544e-05,-3.006881106798122e-05,-1.0521861450616315e-05,-7.069394637765205e-06,8.456813852784327e-05,1.102904590238727e-05,4.079068229848271e-06,5.2527507712962635e-05,7.666545262220497e-06,1.0169118318913766e-05,4.1261180010966335e-05,6.911881452241613e-05,-1.2370661527468972e-06,6.785345731693987e-05,2.9997167534843685e-05,-6.581624457857648e-06,-1.8849755445789904e-05,-0.001,-2.4378792758981422e-05,2.9845649875996695e-05,5.174555285671084e-06,3.5964118560362614e-05,2.6688162609329253e-06,1.0528712740905244e-05,6.442237758818827e-05,3.5729226882920596e-05,2.4003898443427633e-05,-1.3329351532320606e-05,0.00013295678160946735,-8.839861244896874e-06,-0.0019230596874686397,1.2880611157623263e-05,5.8356319709648934e-05,4.931086274365722e-05,3.214725167658771e-05,5.636651087711885e-05,-1.8913882131617346e-05,3.705460884203226e-05,-3.4142891636972032e-06,5.1860436357672035e-06,-1.0241014312571766e-06,0.0003745388612665102,-1.2736891863668971e-05,2.4417912060053618e-05,0.00013393720982553893])

z = np.dot(x_test_normalized, w_0.T)



##########################################testing
for i in range(len(z)):

	if DP.sigmoid(z[i]) >= 0.5:
		y_pre_C1 = np.append(y_pre_C1, "1")
	
	else: 
		y_pre_C1 = np.append(y_pre_C1, "0")
	

	#print(pre)
	#y_pre_C1 = np.append(y_pre_C1, DP.predict(x_test_normalized[i], mean_C1_normalized, mean_C2_normalized, sigma, N1, N2))


idx = []
for i in range(len(y_pre_C1)):
	idx.append(i+1)
df_y_pre = pd.DataFrame(y_pre_C1, index = idx)



df_y_pre.to_csv(PATH_Y_PRE, index = True, header = ["label"], index_label = "id")
